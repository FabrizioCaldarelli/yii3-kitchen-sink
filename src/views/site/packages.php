<?php

use idk\app\helpers\DocHelper;
use idk\app\helpers\Html;
use yii\helpers\Yii;

/** @var array $packages */
/** @var string $title */
/** @var string $subTitle */

$this->title = $title;
$this->subTitle = $subTitle;

?>


<?= DocHelper::doc('3-Packages') ?>

<hr />

<p>
    The current on-going effort is to make the grid below all green:
</p>

<div class="packages">
<?php foreach ($packages as $package => $infos): ?>
    <div class="item">
        <?= $package ?><br />
        <?= Html::a(Html::o('mark-github'), 'https://github.com/yiisoft/' . $package) ?><br />
        <a href="https://travis-ci.<?= $infos['travis'] ?>/yiisoft/<?= $package ?>">
            <img src="https://travis-ci.<?= $infos['travis'] ?>/yiisoft/<?= $package ?>.svg?branch=master" />
        </a>
    </div>
<?php endforeach ?>
</div>

<hr />

<p>
    Below is a dependency graph between Yii 3 packages generated by scanning the <code>require</code> and
    <code>require-dev</code> (dashed lines) sections of each package <em>composer.json</em> file.
</p>

<svg class="deps" width="960" height="960"></svg>

<script src="//d3js.org/d3.v3.min.js"></script>
<script>

// http://blog.thomsonreuters.com/index.php/mobile-patent-suits-graphic-of-the-day/
var links = <?= file_get_contents(Yii::getAlias('@runtime/github/dependencies.json')) ?>;

var nodes = {};

// Compute the distinct nodes from the links.
links.forEach(function(link) {
  link.source = nodes[link.source] || (nodes[link.source] = {name: link.source});
  link.target = nodes[link.target] || (nodes[link.target] = {name: link.target});
});

var width = 960,
    height = 500;

var force = d3.layout.force()
    .nodes(d3.values(nodes))
    .links(links)
    .size([width, height])
    .linkDistance(120)
    .charge(-300)
    .on("tick", tick)
    .start();

var svg = d3.select("svg")
    .attr("width", width)
    .attr("height", height);

// Per-type markers, as they don't inherit styles.
svg.append("defs").selectAll("marker")
    .data(["require", "require-dev"])
  .enter().append("marker")
    .attr("id", function(d) { return d; })
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", -1.5)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
  .append("path")
    .attr("d", "M0,-5L10,0L0,5");

var path = svg.append("g").selectAll("path")
    .data(force.links())
  .enter().append("path")
    .attr("class", function(d) { return "link " + d.type; })
    .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });

var circle = svg.append("g").selectAll("circle")
    .data(force.nodes())
  .enter().append("circle")
    .attr("r", 6)
    .call(force.drag);

var text = svg.append("g").selectAll("text")
    .data(force.nodes())
  .enter().append("text")
    .attr("x", 8)
    .attr("y", ".31em")
    .text(function(d) { return d.name; });

// Use elliptical arc path segments to doubly-encode directionality.
function tick() {
  path.attr("d", linkArc);
  circle.attr("transform", transform);
  text.attr("transform", transform);
}

function linkArc(d) {
  var dx = d.target.x - d.source.x,
      dy = d.target.y - d.source.y,
      dr = Math.sqrt(dx * dx + dy * dy);
  return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
}

function transform(d) {
  return "translate(" + d.x + "," + d.y + ")";
}

</script>
